name: Build and Push Certbot

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build'
        required: false
        default: ''
  schedule:
    - cron: '0 20 * * *'

concurrency:
  group: build-push-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  check:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      build: ${{ steps.check-build.outputs.build }}
    steps:
      - name: Check Version
        id: get-version
        run: |
          if [ -n "${{ inputs.version }}" ]; then
            version="${{ inputs.version }}"
          else
            version=$(curl -s 'https://api.github.com/repos/certbot/certbot/releases/latest' | jq -r ".tag_name")
          fi
          echo "Current Version: ${version}"
          if [ -z "${version}" ] || [ "${version}" == "null" ]; then
            echo "Failed to get version"
            exit 1
          fi
          echo "version=${version}" >> $GITHUB_ENV
          echo "version=${version}" >> $GITHUB_OUTPUT

      - name: Check Build
        id: check-build
        run: |
          gh release view ${version} -R ${{ github.repository }} >/dev/null 2>&1 || echo "build=1" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    runs-on: ubuntu-latest
    needs: check
    if: needs.check.outputs.build == '1'
    env:
      version: ${{ needs.check.outputs.version }}
    steps:
      - name: Check Version
        run: |
          echo "Current Version: ${version}"

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          repository: certbot/certbot
          ref: ${{ env.version }}

      - name: Prepare Build
        run: |
          wget -qO - https://github.com/loong64/certbot/raw/refs/heads/main/0001-feat-add-loongarch64-platform-support.patch | git apply

      - name: Build the Docker images
        run: |
          tools/docker/build.sh ${{ env.version }} loong64

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy the Docker images by architecture
        run: |
          tools/docker/deploy_images.sh ${{ env.version }} loong64

      - name: Push Docker images
        run: |
          tools/docker/deploy_manifests.sh ${{ env.version }} loong64

  release:
    runs-on: ubuntu-latest
    needs: [ check, build ]
    if: needs.check.outputs.build == '1'
    env:
      version: ${{ needs.check.outputs.version }}
    steps:
      - name: Check Version
        run: |
          echo "Current Version: ${version}"

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ env.version }}
          tag_name: ${{ env.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}